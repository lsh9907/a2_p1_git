{
  "name": "and-stream",
  "version": "0.0.2",
  "description": "Filter multiple-streams of incoming objects, and only return objects that are present in all streams.",
  "main": "index.js",
  "scripts": {
    "test": "node_modules/.bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/eugeneware/and-stream"
  },
  "keywords": [
    "and",
    "intersect",
    "join",
    "stream",
    "streams",
    "pipe",
    "all"
  ],
  "author": {
    "name": "Eugene Ware",
    "email": "eugene@noblesamurai.com"
  },
  "license": "BSD",
  "devDependencies": {
    "chai": "~1.7.2",
    "mocha": "~1.12.0",
    "after": "~0.8.1"
  },
  "readme": "# and-stream\n\nNode.js Stream to filter multiple-streams of incoming objects, and only return objects that are present in ALL streams.\n\n[![build status](https://secure.travis-ci.org/eugeneware/and-stream.png)](http://travis-ci.org/eugeneware/and-stream)\n\n## Installation\n\nInstall via npm:\n\n```\n$ npm install and-stream\n```\n\n## Examples\n\n### Only print out objects that are present in two input object streams\n\n``` js\nvar andStream = require('and-stream');\n\n// No key passed into the factory method, so just uses JSON.stringify for uniqueness\nvar and = andStream();\nand\n  .on('data', console.log)\n  .on('end', process.exit);\n\naStreamOfObjects()       // emits objects\n  .pipe(and.stream());\n\nanotherStreamOfObjects() // emits objects\n  .pipe(and.stream());\n\n// Only objects that are identical and emitted by both streams will be printed\n\n```\n\nThe `and-stream` constructor takes an optional argument which is used to\ndetermine the unique key to identify an object by. If not used, it will\ndefault to using `JSON.stringify` to uniquely identify each object, so only\nif the exact same object is present on all streams will the objected be\nemmitted by the `and-stream`.\n\n### Use the `name` property on the object as the object key\n\n``` js\nvar andStream = require('and-stream');\n\n// Use the 'name' field as the key for anding object streams\nvar and = andStream('name');\nand\n  .on('data', console.log)\n  .on('end', process.exit);\n\naStreamOfObjects()       // emits objects\n  .pipe(and.stream());\n\nanotherStreamOfObjects() // emits objects\n  .pipe(and.stream());\n\n// Only objects that have the same .name field on both streams will be printed\n\n```\n\n### Use a custom function on the objects to determine the key\n``` js\nvar andStream = require('and-stream');\n\n// Use the 'name' field as the key for anding object streams\nvar and = andStream(function (data) {\n  var strKey = data.name;\n  var useKey = new Buffer(strKey, 'utf8').toString('base64');\n  return useKey;\n});\nand\n  .on('data', console.log)\n  .on('end', process.exit);\n\naStreamOfObjects()       // emits objects\n  .pipe(and.stream());\n\nanotherStreamOfObjects() // emits objects\n  .pipe(and.stream());\n\n// Only objects that have the same base64 of the .name field on both streams will be printed\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/eugeneware/and-stream/issues"
  },
  "_id": "and-stream@0.0.2",
  "dist": {
    "shasum": "00c4fcea051a3d37f898b61bf3fcb53b5399d366",
    "tarball": "http://registry.npmjs.org/and-stream/-/and-stream-0.0.2.tgz"
  },
  "_from": "and-stream@>=0.0.2 <0.1.0",
  "_npmVersion": "1.3.9",
  "_npmUser": {
    "name": "eugeneware",
    "email": "eugene@noblesamurai.com"
  },
  "maintainers": [
    {
      "name": "eugeneware",
      "email": "eugene@noblesamurai.com"
    }
  ],
  "directories": {},
  "_shasum": "00c4fcea051a3d37f898b61bf3fcb53b5399d366",
  "_resolved": "https://registry.npmjs.org/and-stream/-/and-stream-0.0.2.tgz"
}
